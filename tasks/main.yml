---
# tasks file for openvpn
# - name: include assert.yml
#   include_tasks: assert.yml

- name: install openvpn
  package:
    name: "{{ openvpn_packages }}"
    state: present

- name: ensure openvpn config directory exists
  file:
    path: "{{ item }}"
    state: directory
    recurse: yes
  loop:
    - "{{ openvpn_config_directory }}/private"
    - "{{ openvpn_config_directory }}/certs"
    - "{{ openvpn_config_directory }}/ccd"
    - "{{ openvpn_log_dir }}"

- name: set server certificate parameters
  set_fact:
    ca_requests:
      - name: server
        extensions:
          - "extendedKeyUsage = serverAuth"
  when:
    - openvpn_server is defined

- block:
    - name: configure openvpn client
      template:
        src: client-config.j2
        dest: "{{ openvpn_config_directory }}/ccd/{{ item.name }}"
      loop: "{{ openvpn_clients }}"

    - name: generate client config file
      template:
        src: "{{ openvpn_client_config_file }}.j2"
        dest: "{{ openvpn_config_directory }}/{{ item.name }}.ovpn"
      loop: "{{ openvpn_clients }}"

    - name: add clients to certificate requests list
      set_fact:
        ca_requests: "{{ ca_requests + [ item | combine({ 'extensions': client_extensions }) ] }}"
      loop: "{{ openvpn_clients }}"

  when:
    - openvpn_clients is defined

- name: generate keys and certificates (include ca role)
  include_role:
    name: robertdebock.ca
  vars:
    ca_init: no
      
- block:
    - name: copy server key to config directory
      copy:
        remote_src: yes
        src: "{{ openvpn_ca_path }}/subject_keys/server.pem"
        dest: "{{ openvpn_config_directory }}/private/server.pem"
        mode: 0600

    - name: copy server and ca certificates to config directory
      copy:
        remote_src: yes
        src: "{{ openvpn_ca_path }}/certs/{{ item }}"
        dest: "{{ openvpn_config_directory }}/certs/{{ item }}"
      loop:
        - ca.crt
        - server.crt

    - name: generate static encryption key
      command: openvpn --genkey --secret {{ openvpn_static_encryption_key }}
      args:
        creates: "{{ openvpn_static_encryption_key }}"

    - name: save static encryption key
      slurp:
        src: "{{ openvpn_static_encryption_key }}"
      register: openvpn_save_static_encryption_key
  when:
    - openvpn_server is defined
    - openvpn_server | bool

- name: distribute static encryption key
  copy:
    content: "{{ openvpn_save_static_encryption_key.content | b64decode }}"
    dest: "{{ openvpn_static_encryption_key }}"

- name: fetch client config tarball
  include_tasks: fetch_client_config.yml
  when:
    - openvpn_clients is defined
    - openvpn_fetch_client_config_to is defined  

- block:
    - name: generate dh2048 key
      command: openssl dhparam -out {{ openvpn_dh2048_key }} 2048
      args:
        creates: "{{ openvpn_dh2048_key }}"

    - name: copy sample server.conf
      copy:
        src: server-sample.conf
        dest: "{{ openvpn_config_directory }}/server-sample.conf"

    - name: configure openvpn server
      template:
        src: "{{ openvpn_server_config_file }}.j2"
        dest: "{{ openvpn_config_directory }}/{{ openvpn_server_config_file }}"
      notify:
        - restart openvpn
  when:
    - openvpn_server is defined
    - openvpn_server | bool

- name: start and enable openvpn server
  service:
    name: "{{ openvpn_service }}"
    state: started
    enabled: yes
  when:
    - openvpn_server is defined
    - openvpn_server | bool
